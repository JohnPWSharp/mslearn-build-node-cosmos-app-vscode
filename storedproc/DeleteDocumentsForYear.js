function DeleteDocumentsForYear() {
    var collection = getContext().getCollection();
    var collectionLink = collection.getSelfLink();
    var response = getContext().getResponse();

    // Keep a running total of the number of documents removed
    var numDocsDeleted = 0;
    
    // Retrieve all docs from the current partition (the data is partitioned by AcademicYear)
    var docQuery = "SELECT * FROM StudentCourseGrades";
 
    // Run the query to find and remove all matching docs
    // The query might take a long time to run (if there are a lot of docs), and the results could be paged.
    // If the results are paged, Cosmos DB will provide its own continuation token (not to be confused with the continuation token generated by this stored procedure)
    tryFind();

    function tryFind(continuationToken) {
        var options = { continuation: continuationToken }; // If a continuation taken was passed in by Cosmos DB, use it to continue paging through the query results

        // Run the query, and invoke the callback with the results
        var isAccepted = collection.queryDocuments(collectionLink, docQuery, options, tryFindCallback);

        // If time is up, return a response body that includes the count of documents deleted so far, and our own custom continuation token
        if (!isAccepted) {
            var responseBody = { deleted: numDocsDeleted, continuation: true};
            response.setBody(responseBody);
        }
    }

    // Callback that runs when the query to find matching docs completes
    function tryFindCallback(err, docs, options) {

        // Handle any errors that might have occurred while running the query
        if (err)
            throw Error(err);

        // If there are still documents to delete (the query returned an array of one or more docs), then try and remove them
        else if (docs.length > 0)
            tryDelete(docs);

        // If the docs array is empty, but we have a Comos DB continuation token, then continue querying to retrieve the next page of docs
        else if (options.continuation)
            tryFind(options.continuation);

        // If there are no more documents to delete, and no Cosmos DB continuation token, then we are done
        else {
            var responseBody = { deleted: numDocsDeleted, continuation: false};
            response.setBody(responseBody);
        }
    }

    // Function that deletes all documents listed in the array passed in as the parameter
    function tryDelete(docs) {

        // Attempt to delete the docs
        docs.forEach(doDelete);

        // Query and get the next page of docs to delete
        tryFind();
    }

    // Function that attempts to delete a doc, checking for runtime availability
    function doDelete(doc) {

        var isAccepted = collection.deleteDocument(doc._self, {}, doDeleteCallback);

        // If there is insufficient runtime available, pass back a custom continuation containing the number of docs deleted to the client
        if (!isAccepted) {
            var responseBody = { deleted: numDocsDeleted, continuation: true};
            response.setBody(responseBody);
        }
    }

    // When a document has been deleted, check for errors, and then increment numDocsDeleted
    function doDeleteCallback(err) {
        if (err)
            throw Error(err);

        numDocsDeleted++;
    }
}